# @configure_input@

SRC = @srcdir@
BUILD = @builddir@

.DEFAULT_GOAL: all

OUTFORMATS =
OUTTYPES =

@lame_TRUE@                    OUTFORMATS += mp3
@oggenc_TRUE@                  OUTFORMATS += ogg
@flac_TRUE@                    OUTFORMATS += flac

@fluidsynth_TRUE@              OUTTYPES += fluidsynth-ydp
@linuxsampler_TRUE@            OUTTYPES += linuxsampler-maestro
@linuxsampler_sfz_TRUE@        OUTTYPES += linuxsampler-salamander
@linuxsampler_pleyelp190_TRUE@ OUTTYPES += linuxsampler-pleyelp190
@linuxsampler_steinwayc_TRUE@  OUTTYPES += linuxsampler-steinwayc
@linuxsampler_sfz_TRUE@        OUTTYPES += linuxsampler-tinypiano
@linuxsampler_sfz_TRUE@        OUTTYPES += linuxsampler-imis
@timidity_TRUE@                OUTTYPES += timidity-freepats

# Programs we use
CP = @cp@
CPFLAGS = @cp_flags@
MV = @mv@
MVFLAGS = @mv_flags@
PATCH = @patch@
PATCHFLAGS = @patch_flags@
LILYPOND = @lilypond@
LILYPONDFLAGS = @lilypond_flags@
TIMIDITY = @timidity@
TIMIDITYFLAGS = @timidity_flags@
TIMIDITY_SETSOUNDFONT_PRE = -x "dir /\nsoundfont
TIMIDITY_SETSOUNDFONT_POST = "
TIMIDITY_SETGUSPATCH_PRE = -x "dir /\nsoundfont /dev/null\nfont exclude 0 0\nbank 0\n0
TIMIDITY_SETGUSPATCH_POST = "
FLUIDSYNTH = @fluidsynth@
FLUIDSYNTHFLAGS = @fluidsynth_flags@
LAME = @lame@
LAMEFLAGS = @lame_flags@
OGGENC = @oggenc@
OGGENCFLAGS = @oggenc_flags@
FLAC = @flac@
FLACFLAGS = @flac_flags@
WGET = @wget@
WGETFLAGS = @wget_flags@
UNRAR = @unrar@
UNRARFLAGS = @unrar_flags@
SOX = @sox@
SOXFLAGS = @sox_flags@
GZ = @gz@
GZFLAGS = @gz_flags@
UNGZ = @ungz@
UNGZFLAGS = @ungz_flags@
SEVENZIP = @sevenzip@
SEVENZIPFLAGS = @sevenzip_flags@
ROSEGARDEN = @rosegarden@
ROSEGARDENFLAGS = @rosegarden_flags@
MP3GAIN = @mp3gain@
MP3GAINFLAGS = @mp3gain_flags@
VORBISGAIN = @vorbisgain@
VORBISGAINFLAGS = @vorbisgain_flags@
PERL = @perl@
PERLFLAGS = @perl_flags@
JACKD = @jackd@
JACKDFLAGS = @jackd_flags@
LINUXSAMPLER = @linuxsampler@
LINUXSAMPLERFLAGS = @linuxsampler_flags@
JACK_CONNECT = @jack_connect@
JACK_CONNECTFLAGS = @jack_connect_flags@
JACK_SMF_PLAYER = @jack_smf_player@
JACK_SMF_PLAYERFLAGS = @jack_smf_player_flags@
JACK_LSP = @jack_lsp@
JACK_LSPFLAGS = @jack_lsp_flags@
NCAT = @ncat@
NCATFLAGS = @ncat_flags@
UNPKZIP = @unpkzip@
UNPKZIPFLAGS = @unpkzip_flags@
TAR = @tar@
TARFLAGS = @tar_flags@

# Source files
RG = $(SRC)/sonatina1/sonatina1.rg $(SRC)/sonatina2/sonatina2.rg $(SRC)/sonatina3/sonatina3.rg $(SRC)/sonatina4/sonatina4.rg $(SRC)/sonatina5/sonatina5.rg $(SRC)/sonatina6/sonatina6.rg $(SRC)/sonatina7/sonatina7.rg $(SRC)/sonatina8/sonatina8.rg
LY_DIFF = $(patsubst $(SRC)/%.rg,$(SRC)/%.ly.diff,$(RG))

# Saved intermediate files (part of the source distribution)
MID = $(patsubst $(SRC)/%.rg,$(SRC)/%.mid,$(RG))
LY_ORIG = $(patsubst $(SRC)/%.rg,$(SRC)/%.ly.orig,$(RG))
MANUAL = $(MID) $(LY_ORIG)
.SECONDARY: $(MANUAL)

# Avoid regenerating this (would cascade to regenerate all outputs)
MID_FORMAT0 = $(patsubst $(SRC)/%.rg,$(BUILD)/%-format0.mid,$(RG))
.SECONDARY: $(MID_FORMAT0)

# Intermediate files
LY = $(patsubst $(SRC)/%.rg,$(BUILD)/%.ly,$(RG))
AUDIO_UNCUT_AND_RAW = $(foreach TEMPTYPE,cut uncut raw,$(foreach OUTTYPE,$(OUTTYPES),$(patsubst $(SRC)/%.rg,$(BUILD)/%-$(OUTTYPE)-$(TEMPTYPE).wav,$(RG))))
INTERMEDIATE = $(LY) $(AUDIO_UNCUT_AND_RAW)
.INTERMEDIATE: $(INTERMEDIATE)

# Output files
PDF =
@lilypond_TRUE@ PDF += $(patsubst $(SRC)/%.rg,$(BUILD)/%.pdf,$(RG))
AUDIO = $(foreach OUTFORMAT,$(OUTFORMATS),$(foreach OUTTYPE,$(OUTTYPES),$(patsubst $(SRC)/%.rg,$(BUILD)/%-$(OUTTYPE).$(OUTFORMAT),$(RG))))
OUTPUT = $(PDF) $(AUDIO)

.PHONY: all
all: $(OUTPUT)

.PHONY: all-lowdisk
all-lowdisk: format0
	set -x; \
	for rg in $(RG); do \
		$(MAKE) RG=$$rg tempclean; \
		$(MAKE) RG=$$rg all; \
		$(MAKE) RG=$$rg tempclean; \
	done

.PHONY: manual
manual: $(MANUAL)

.PHONY: format0
format0: $(MID_FORMAT0)

$(BUILD)/support:
	mkdir -p $(BUILD)/support

FETCH =

@timidity_TRUE@ FETCH += $(BUILD)/support/000_Acoustic_Grand_Piano.pat
$(BUILD)/support/000_Acoustic_Grand_Piano.pat: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O '000_Acoustic_Grand_Piano.pat' 'https://github.com/rism-ch/midi-player/raw/master/freepats/Tone_000/000_Acoustic_Grand_Piano.pat'

.INTERMEDIATE: $(BUILD)/support/grand-piano-YDP-20160804.tar.bz2
$(BUILD)/support/grand-piano-YDP-20160804.tar.bz2: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'grand-piano-YDP-20160804.tar.bz2' 'http://freepats.zenvoid.org/Piano/YDP-GrandPiano/grand-piano-YDP-20160804.tar.bz2'
@fluidsynth_TRUE@ FETCH += $(BUILD)/support/grand-piano-YDP-20160804.sf2
$(BUILD)/support/grand-piano-YDP-20160804.sf2: | $(BUILD)/support/grand-piano-YDP-20160804.tar.bz2
	cd $(BUILD)/support && $(TAR) xvjf 'grand-piano-YDP-20160804.tar.bz2' $(TARFLAGS) grand-piano-YDP-20160804/grand-piano-YDP-20160804.sf2 && $(MV) $(MVFLAGS) grand-piano-YDP-20160804/grand-piano-YDP-20160804.sf2 grand-piano-YDP-20160804.sf2

.INTERMEDIATE: $(BUILD)/support/maestro_concert_grand_v2.rar
$(BUILD)/support/maestro_concert_grand_v2.rar: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'maestro_concert_grand_v2.rar' 'http://download.linuxsampler.org/instruments/pianos/maestro_concert_grand_v2.rar'
@linuxsampler_TRUE@ FETCH += $(BUILD)/support/maestro_concert_grand_v2.gig
$(BUILD)/support/maestro_concert_grand_v2.gig: | $(BUILD)/support/maestro_concert_grand_v2.rar
	cd $(BUILD)/support && $(UNRAR) x $(UNRARFLAGS) 'maestro_concert_grand_v2.rar' 'maestro_concert_grand_v2.gig'

.INTERMEDIATE: $(BUILD)/support/SalamanderGrandPianoV2_OggVorbis.tar.bz2
$(BUILD)/support/SalamanderGrandPianoV2_OggVorbis.tar.bz2: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'SalamanderGrandPianoV2_OggVorbis.tar.bz2' 'http://download.linuxaudio.org/lau/SalamanderGrandPianoV2/SalamanderGrandPianoV2_OggVorbis.tar.bz2'
.INTERMEDIATE: $(BUILD)/support/sgpOgg_V2toV3.tar.bz2
$(BUILD)/support/sgpOgg_V2toV3.tar.bz2: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'sgpOgg_V2toV3.tar.bz2' 'http://dl.dropbox.com/u/16547648/sgpOgg_V2toV3.tar.bz2'
@linuxsampler_sfz_TRUE@@linuxsampler_sfz_ogg_TRUE@ FETCH += $(BUILD)/support/SalamanderGrandPianoV2_OggVorbis/SalamanderGrandPianoV3.sfz
$(BUILD)/support/SalamanderGrandPianoV2_OggVorbis/SalamanderGrandPianoV3.sfz: | $(BUILD)/support/SalamanderGrandPianoV2_OggVorbis.tar.bz2 $(BUILD)/support/sgpOgg_V2toV3.tar.bz2
	cd $(BUILD)/support && $(RM) -r salamanderOgg_V2toV3/
	cd $(BUILD)/support && $(TAR) xvjf 'SalamanderGrandPianoV2_OggVorbis.tar.bz2' $(TARFLAGS) SalamanderGrandPianoV2_OggVorbis/
	cd $(BUILD)/support && $(MV) $(MVFLAGS) SalamanderGrandPianoV2_OggVorbis/ salamanderOgg_V2toV3/
	cd $(BUILD)/support && $(TAR) xvjf 'sgpOgg_V2toV3.tar.bz2' $(TARFLAGS) salamanderOgg_V2toV3/
	cd $(BUILD)/support && $(MV) $(MVFLAGS) salamanderOgg_V2toV3/ SalamanderGrandPianoV2_OggVorbis/

.INTERMEDIATE: $(BUILD)/support/SalamanderGrandPianoV2_48khz24bit.tar.bz2
$(BUILD)/support/SalamanderGrandPianoV2_48khz24bit.tar.bz2: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'SalamanderGrandPianoV2_48khz24bit.tar.bz2' 'http://download.linuxaudio.org/lau/SalamanderGrandPianoV2/SalamanderGrandPianoV2_48khz24bit.tar.bz2'
.INTERMEDIATE: $(BUILD)/support/sgp48khz_V2toV3.tar.bz2
$(BUILD)/support/sgp48khz_V2toV3.tar.bz2: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'sgp48khz_V2toV3.tar.bz2' 'http://dl.dropbox.com/u/16547648/sgp48khz_V2toV3.tar.bz2'
@linuxsampler_sfz_TRUE@@linuxsampler_sfz_ogg_FALSE@ FETCH += $(BUILD)/support/SalamanderGrandPianoV2_48khz24bit/SalamanderGrandPianoV3.sfz
$(BUILD)/support/SalamanderGrandPianoV2_48khz24bit/SalamanderGrandPianoV3.sfz: | $(BUILD)/support/SalamanderGrandPianoV2_48khz24bit.tar.bz2 $(BUILD)/support/sgp48khz_V2toV3.tar.bz2
	cd $(BUILD)/support && $(RM) -r salamander48khz\ V2toV3/
	cd $(BUILD)/support && $(TAR) xvjf 'SalamanderGrandPianoV2_48khz24bit.tar.bz2' $(TARFLAGS) SalamanderGrandPianoV2_48khz24bit/
	cd $(BUILD)/support && $(MV) $(MVFLAGS) SalamanderGrandPianoV2_48khz24bit/ salamander48khz\ V2toV3/
	cd $(BUILD)/support && $(TAR) xvjf 'sgp48khz_V2toV3.tar.bz2' $(TARFLAGS) salamander48khz\ V2toV3/
	cd $(BUILD)/support && $(MV) $(MVFLAGS) salamander48khz\ V2toV3/ SalamanderGrandPianoV2_48khz24bit/ 

.INTERMEDIATE: $(BUILD)/support/Iowa_Piano.zip
$(BUILD)/support/Iowa_Piano.zip: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'Iowa_Piano.zip' 'http://www.mediafire.com/download/uv2ehmh8qdvfno1/Iowa_Piano.zip'
@linuxsampler_sfz_TRUE@ FETCH += $(BUILD)/support/Iowa_MIS_Piano.sfz
$(BUILD)/support/Iowa_Piano/Iowa_MIS_Piano.sfz: | $(BUILD)/support/Iowa_Piano.zip
	cd $(BUILD)/support && $(UNPKZIP) $(UNPKZIPFLAGS) 'Iowa_Piano.zip' && $(MV) 'Iowa Piano' 'Iowa_Piano' && $(MV) 'Iowa_Piano/Iowa MIS Piano.sfz' 'Iowa_Piano/Iowa_MIS_Piano.sfz'

.INTERMEDIATE: $(BUILD)/support/classicpianos-pleyel_ambient_p190.giga-*.rar
$(BUILD)/support/classicpianos-pleyel_ambient_p190.giga-*.rar: | $(BUILD)/support
	@echo
	@echo
	@echo MANUAL TASK:
	@echo Register at http://www.gigfiles.com/freebees.php
	@echo and download the FREE Piano set
	@echo Pleyel Ambient P190
	@echo
	@echo Place the downloaded file in
	@echo $@
	@echo to proceed.
	@echo
	@echo
	@false
@linuxsampler_pleyelp190_TRUE@ FETCH += $(BUILD)/support/classicpianos-pleyel_ambient_p190.gig
$(BUILD)/support/classicpianos-pleyel_ambient_p190.gig: | $(BUILD)/support/classicpianos-pleyel_ambient_p190.giga-*.rar
	cd $(BUILD)/support && $(UNRAR) x $(UNRARFLAGS) classicpianos-pleyel_ambient_p190.giga-*.rar 'Pleyel P190.gig' && $(MV) $(MVFLAGS) 'Pleyel P190.gig' 'classicpianos-pleyel_ambient_p190.gig'

.INTERMEDIATE: $(BUILD)/support/classicpianos-steinway_c.giga-*.rar
$(BUILD)/support/classicpianos-steinway_c.giga-*.rar: | $(BUILD)/support
	@echo
	@echo
	@echo MANUAL TASK:
	@echo Register at http://www.gigfiles.com/freebees.php
	@echo and download the FREE Piano set
	@echo Steinway C
	@echo
	@echo Place the downloaded file in
	@echo $@
	@echo to proceed.
	@echo
	@echo
	@false
@linuxsampler_steinwayc_TRUE@ FETCH += $(BUILD)/support/classicpianos-steinway_c.gig
$(BUILD)/support/classicpianos-steinway_c.gig: | $(BUILD)/support/classicpianos-steinway_c.giga-*.rar
	cd $(BUILD)/support && $(UNRAR) x $(UNRARFLAGS) classicpianos-steinway_c.giga-*.rar 'Steinway C.gig' && $(MV) $(MVFLAGS) 'Steinway C.gig' 'classicpianos-steinway_c.gig'

.INTERMEDIATE: $(BUILD)/support/sig-ex-exp_tiny-piano00.zip
$(BUILD)/support/sig-ex-exp_tiny-piano00.zip: | $(BUILD)/support
	cd $(BUILD)/support && $(WGET) $(WGETFLAGS) -O 'sig-ex-exp_tiny-piano00.zip' 'https://musical-artifacts.com/artifacts/402/sig-ex-exp_tiny-piano00.zip'
@linuxsampler_sfz_TRUE@ FETCH += $(BUILD)/support/sig-ex-exp_tiny-piano00/tiny-piano.sfz
$(BUILD)/support/sig-ex-exp_tiny-piano00/tiny-piano.sfz: | $(BUILD)/support/sig-ex-exp_tiny-piano00.zip
	cd $(BUILD)/support && $(UNPKZIP) $(UNPKZIPFLAGS) sig-ex-exp_tiny-piano00.zip

fetch: $(FETCH)


# Format 0 MIDI (friendly for the synths)
$(BUILD)/%-format0.mid: $(SRC)/%.mid
	d=$@ && mkdir -p $${d%/*}
	$(PERL) $(PERLFLAGS) $(SRC)/bin/to_format0.pl $< $@ 5 5 1 1 0

# Audio renderers

$(BUILD)/%-timidity-freepats-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/000_Acoustic_Grand_Piano.pat
	$(TIMIDITY) $(TIMIDITYFLAGS) $(TIMIDITY_SETGUSPATCH_PRE)  $| $(TIMIDITY_SETGUSPATCH_POST)  -EI0 -EFreverb=G,40 -EFchorus=n,30 -Ow2 -o $@ $<

$(BUILD)/%-fluidsynth-ydp-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/grand-piano-YDP-20160804.sf2
	$(FLUIDSYNTH) $(FLUIDSYNTHFLAGS) -O float -F $@ $| $<

$(BUILD)/%-linuxsampler-pleyelp190-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/classicpianos-pleyel_ambient_p190.gig
	$(SRC)/bin/linuxsampler.sh $< $| $@

$(BUILD)/%-linuxsampler-steinwayc-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/classicpianos-steinway_c.gig
	$(SRC)/bin/linuxsampler.sh $< $| $@

$(BUILD)/%-linuxsampler-tinypiano-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/sig-ex-exp_tiny-piano00/tiny-piano.sfz
	$(SRC)/bin/linuxsampler.sh $< $| $@

# hack: needs less stereo separation
.INTERMEDIATE: $(BUILD)/%-linuxsampler-imis-raw.wav
$(BUILD)/%-linuxsampler-imis-raw.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/Iowa_Piano/Iowa_MIS_Piano.sfz
	$(SRC)/bin/linuxsampler.sh $< $| $@
$(BUILD)/%-linuxsampler-imis-uncut.wav: $(BUILD)/%-linuxsampler-imis-raw.wav
	$(SOX) $(SOXFLAGS) $< $@ remix 1v0.6,2v0.4 1v0.4,2v0.6

@linuxsampler_sfz_ogg_TRUE@$(BUILD)/%-linuxsampler-salamander-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/SalamanderGrandPianoV2_OggVorbis/SalamanderGrandPianoV3.sfz
@linuxsampler_sfz_ogg_TRUE@	$(SRC)/bin/linuxsampler.sh $< $| $@

@linuxsampler_sfz_ogg_FALSE@$(BUILD)/%-linuxsampler-salamander-uncut.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/SalamanderGrandPianoV2_48khz24bit/SalamanderGrandPianoV3.sfz
@linuxsampler_sfz_ogg_FALSE@	$(SRC)/bin/linuxsampler.sh $< $| $@

# hack: needs extra reverb
.INTERMEDIATE: $(BUILD)/%-linuxsampler-maestro-raw.wav
$(BUILD)/%-linuxsampler-maestro-raw.wav: $(BUILD)/%-format0.mid | $(BUILD)/support/maestro_concert_grand_v2.gig
	$(SRC)/bin/linuxsampler.sh $< $| $@
$(BUILD)/%-linuxsampler-maestro-uncut.wav: $(BUILD)/%-linuxsampler-maestro-raw.wav
	$(SOX) $(SOXFLAGS) $< $@ reverb 50 50 60 100 0 0

$(BUILD)/%-ramp.rg: $(SRC)/%.rg
	d=$@ && mkdir -p $${d%/*}
	< $< $(UNGZ) $(UNGZFLAGS) --force --stdout | $(PERL) $(PERLFLAGS) $(SRC)/bin/autoramp.pl | $(GZ) $(GZFLAGS) --stdout > $@
	
$(SRC)/%.mid: | $(BUILD)/%-ramp.rg
	@echo
	@echo
	@echo MANUAL TASK:
	@echo Please export to MIDI as $@
	@echo
	@echo
	$(ROSEGARDEN) $(ROSEGARDENFLAGS) $| >/dev/null 2>&1
	[ -f $@ ]

$(SRC)/%.ly.orig: | $(SRC)/%.rg
	@echo
	@echo
	@echo MANUAL TASK:
	@echo Please export to Lilypond as $@
	@echo
	@echo
	$(ROSEGARDEN) $(ROSEGARDENFLAGS) $| >/dev/null 2>&1
	[ -f $@ ]


# Audio transforms

# we normalize to -1 dB FSD to have some safety margin for lossy audio codecs while retaining lots of accuracy from the input
$(BUILD)/%-cut.wav: $(BUILD)/%-uncut.wav
	$(SOX) $(SOXFLAGS) $< -b 16 $@ silence 1 0 0.005% reverse silence 1 0 0.005% reverse gain -n -1

$(BUILD)/%.flac: $(BUILD)/%-cut.wav
	$(FLAC) $(FLACFLAGS) -f -o $@ $< && touch $@

$(BUILD)/%.mp3: $(BUILD)/%-cut.wav
	$(LAME) $(LAMEFLAGS) $< $@
@mp3gain_TRUE@	$(MP3GAIN) $(MP3GAINFLAGS) -r -k $@

$(BUILD)/%.ogg: $(BUILD)/%-cut.wav
	$(OGGENC) $(OGGENCFLAGS) -o $@ $<
@vorbisgain_TRUE@	$(VORBISGAIN) $(VORBISGAINFLAGS) $@


# PDF making
$(BUILD)/%.ly: $(SRC)/%.ly.diff $(SRC)/%.ly.orig
	d=$@ && mkdir -p $${d%/*}
	set -- $^ && $(CP) $(CPFLAGS) $$2 $@
	set -- $^ && $(PATCH) $(PATCHFLAGS) $@ $$1

$(BUILD)/%.pdf: $(BUILD)/%.ly
	$(LILYPOND) $(LILYPONDFLAGS) -o $* $<


# For maintainer: song art making.
png: $(patsubst %.pdf,%.png,$(PDF))
$(BUILD)/%.png: $(BUILD)/%.pdf $(BUILD)/%.txt
	convert -density 450 $<'[1]' \
		+matte -geometry 25% -gravity Center -crop 500x500+0+0 \
		\( -background white -fill black -pointsize 1.75 \
			label:"`cat $*.txt`" \
			-bordercolor black -border 1x1 \) \
		-gravity South -composite \
		$@


# Cleanup
.PHONY: tempclean
tempclean:
	$(RM) $(INTERMEDIATE)

.PHONY: clean
clean: tempclean
	$(RM) $(OUTPUT) $(MID_FORMAT0)

.PHONY: distclean
distclean: clean
	$(RM) $(FETCH) Makefile config.status config.log

.PHONY: realclean
realclean: disclean
	$(RM) $(SECONDARY)


# global options
.EXPORT_ALL_VARIABLES:
